// Exp2_2.java
import java.io.*;
import java.util.*;

class Student implements Serializable {
    private static final long serialVersionUID = 1L;
    int rollNo;
    String name;

    public Student(int rollNo, String name) {
        this.rollNo = rollNo;
        this.name = name;
    }

    public void display() {
        System.out.println("Roll No: " + rollNo + ", Name: " + name);
    }
}

class Employee implements Serializable {
    private static final long serialVersionUID = 1L;
    int id;
    String name;
    double salary;

    public Employee(int id, String name, double salary) {
        this.id = id;
        this.name = name;
        this.salary = salary;
    }

    public void display() {
        System.out.println("ID: " + id + ", Name: " + name + ", Salary: " + salary);
    }
}

public class Exp2_2 {
    static final String studentFile = "student.ser";
    static final String employeeFile = "employees.dat";

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int choice;

        do {
            System.out.println("\n--- PBLJ Experiment 2.2 ---");
            System.out.println("1. Sum of Integers (Autoboxing/Unboxing)");
            System.out.println("2. Serialize & Deserialize Student");
            System.out.println("3. Employee Management System (File Handling)");
            System.out.println("4. Exit");
            System.out.print("Enter choice: ");
            choice = sc.nextInt();

            switch (choice) {
                case 1 -> sumOfIntegers(sc);
                case 2 -> studentSerialization();
                case 3 -> employeeMenu(sc);
                case 4 -> System.out.println("Exiting program...");
                default -> System.out.println("Invalid choice!");
            }
        } while (choice != 4);

        sc.close();
    }

    // ---------- Part A ----------
    static void sumOfIntegers(Scanner sc) {
        System.out.print("Enter first integer: ");
        Integer num1 = sc.nextInt(); // Autoboxing
        System.out.print("Enter second integer: ");
        Integer num2 = sc.nextInt(); // Autoboxing

        int sum = num1 + num2; // Unboxing
        System.out.println("Sum of integers: " + sum);
    }

    // ---------- Part B ----------
    static void studentSerialization() {
        // Serialization
        try (ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(studentFile))) {
            Student s1 = new Student(101, "Aayush");
            out.writeObject(s1);
            System.out.println("Student serialized to file: " + studentFile);
        } catch (IOException e) {
            e.printStackTrace();
        }

        // Deserialization
        try (ObjectInputStream in = new ObjectInputStream(new FileInputStream(studentFile))) {
            Student s2 = (Student) in.readObject();
            System.out.println("Deserialized Student object:");
            s2.display();
        } catch (IOException | ClassNotFoundException e) {
            e.printStackTrace();
        }
    }

    // ---------- Part C ----------
    static void employeeMenu(Scanner sc) {
        int choice;
        do {
            System.out.println("\n--- Employee Management System ---");
            System.out.println("1. Add Employee");
            System.out.println("2. View Employees");
            System.out.println("3. Back to Main Menu");
            System.out.print("Enter choice: ");
            choice = sc.nextInt();

            switch (choice) {
                case 1 -> addEmployee(sc);
                case 2 -> viewEmployees();
                case 3 -> System.out.println("Returning to main menu...");
                default -> System.out.println("Invalid choice!");
            }
        } while (choice != 3);
    }

    static void addEmployee(Scanner sc) {
        System.out.print("Enter Employee ID: ");
        int id = sc.nextInt();
        sc.nextLine();
        System.out.print("Enter Employee Name: ");
        String name = sc.nextLine();
        System.out.print("Enter Employee Salary: ");
        double salary = sc.nextDouble();

        Employee emp = new Employee(id, name, salary);

        try (ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(employeeFile, true)) {
            // Override writeStreamHeader when appending
            protected void writeStreamHeader() throws IOException {}
        }) {
            out.writeObject(emp);
            System.out.println("Employee added successfully!");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    static void viewEmployees() {
        try (ObjectInputStream in = new ObjectInputStream(new FileInputStream(employeeFile))) {
            while (true) {
                Employee emp = (Employee) in.readObject();
                emp.display();
            }
        } catch (EOFException e) {
            System.out.println("End of employee list.");
        } catch (IOException | ClassNotFoundException e) {
            e.printStackTrace();
        }
    }
}
